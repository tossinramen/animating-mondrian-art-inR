---
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages

library(tidyverse)
library(RColorBrewer)
library(plotly) 
library(ggplot2)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, error=F, warning=F)
library(tidyverse) # CSV file I/O, e.g. the read_csv function
library(RColorBrewer)
library(plotly) 

#theme
my_theme <- function(base_size = 12, base_family = "Helvetica"){
    theme_minimal() +
    theme(axis.title.y = element_blank(),axis.title.x = element_blank(),
    plot.title = element_text(face="bold", size=16),
    axis.text = element_blank(),
    plot.background = element_rect(fill = 'ghostwhite',color='white'),
    panel.grid = element_blank(),
    legend.position = 'None', legend.title = element_blank())
}

```

This code seeks to generate Piet Mondrian style painting in his Paris period and NYC period

A typical painting of his contains lines, segments and area to achieve 'the rhythm of relations of color and size'.

Fill area between lines and segment is the main challenge

## Generate random data

```{r input}
df=data.frame(x=c(1,3,2,5),y=c(3,8,7,1))
df_add <- data.frame(z=c(2,5,2,3,1,5,6,7,7.5)) %>% 
    mutate(color = sample(3, nrow(.), replace=T))
```

```{r}
find_small_squares <- function(df, n) {
  df_x <- df%>% arrange(x) %>%
    mutate(x_lead=lead(x,1), x_gap = x_lead-x) %>%
    arrange(x_gap) %>%
    head(n) %>% 
    select(x, x_lead)
  
  df_y <- df%>% arrange(y) %>%
    mutate(y_lead=lead(y,1), y_gap = y_lead-y) %>%
    arrange(y_gap) %>%
    head(n) %>% 
    select(y, y_lead)
  
  df_rect <- df_x %>% 
    cbind(df_y) %>% 
    mutate(color = sample(3, nrow(.), replace=T))

  #to ensure no NA datapoint in df_rect, need to make sure n<nrow(df)  
  return(df_rect)
}
```

## paris period

```{r paris, fig.width = 5,  fig.height = 5}
set.seed(1)


<<<<<<< HEAD
df=data.frame(x=c(3,8,8.2,10),y=c(0,0,0,0))
=======
x_values = data.frame(x = c(1,2.8,8,9.2,10))
y_values=data.frame(y = c(4, 5, 7))
half_lines = data.frame(x_start = c(2.8, 2.8, 1, 2.8),x_end = c(8, 8, 9.2, 10), y = c(10, 7.8, 4.5, 0))
>>>>>>> 6ae2df3be5e6894342f0a3158db6df0092533add

rectangles = data.frame(xmin = c(-0.5, -0.5, -0.5, 5.5, 8, 10), xmax = c(1, 1, 1, 6, 10, 10.5), ymin = c(7.8, 4, 2.8, -0.5, -0.5, 5), ymax = c(11, 5, 3.5, 0, 0, 7), color = c("blue", "yellow", "red", "red", "yellow", "red"))

df |>
  ggplot()+
  geom_rect(data = rectangles, aes(xmin= xmin,
                              xmax= xmax, 
                              ymin= ymin,
                              ymax=ymax,
            fill=as.factor(color))) +
  geom_vline(xintercept = x_values$x, linewidth=3)+
  geom_hline(yintercept = y_values$y, linewidth=3) + 
  coord_cartesian(xlim = c(0,10), ylim = c(0,10))+
  geom_segment(data=half_lines, aes(x = x_start, xend = x_end, y = y), linewidth = 3)+
  annotate(geom = "segment", 
           y = 7.8, 
           x = -0.5, 
           xend = 1,
           linewidth = 5)+
  scale_fill_manual(values = c("blue" = "#255293","red" = "#db0a16", "yellow" = "yellow"))+
  my_theme() 

```
